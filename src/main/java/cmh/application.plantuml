@startuml

title __APPLICATION's Class Diagram__\n

  namespace cmh.application {
    interface cmh.application.Breakable {
        {abstract} + break_()
        {abstract} + damage()
        {abstract} + onBreakEvent()
    }
  }
  

  namespace cmh.application {
    enum Condition {
      BROKEN
      INTACT
      strCond
    }
  }
  

  namespace cmh.application {
    class cmh.application.Cop {
        {static} - amount : int
        + Cop()
        + Cop()
        + equals()
        + getMeleeWeapon()
        + getRangedWeapon()
        + melee()
        + setMeleeWeapon()
        + setRangedWeapon()
        + shoot()
        + swing()
        + toString()
    }
  }
  

  namespace cmh.application {
    interface cmh.application.DamageDealer {
        {abstract} + dealDamage()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Device {
        + Device()
        + Device()
    }
  }
  

  namespace cmh.application {
    abstract class cmh.application.Entity {
        # name : String
        - ID : Integer
        {static} - ammount : int
        - onTheGround : boolean
        + equals()
        + getLocation()
        + getName()
        + hashCode()
        + isOnTheGround()
        + moveTo()
        + moveToEntity()
        + setLocation()
        + setOnTheGround()
        ~ Entity()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Human {
        {static} - humanAmount : int
        - wounds : ArrayList<Wound>
        + Human()
        + Human()
        + addWound()
        + customSpeech()
        + endure()
        + getHeldDevice()
        + getWounds()
        + noticeShooting()
        + say()
        + setHeldDevice()
        + setOnNoticeShootingListener()
        + setWounds()
        + shout()
        + toString()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Wound {
        - comments : String
        - name : String
        + toString()
        ~ Wound()
    }
  }
  

  namespace cmh.application {
    abstract class cmh.application.Listener {
        {abstract} + notify()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Location {
        - entities : HashSet<Entity>
        - name : String
        + AntiGrav()
        + Location()
        + addEntity()
        + equals()
        + getEntities()
        + hashCode()
        + toString()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Main {
        {static} + main()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Medic {
        + heal()
        ~ Medic()
        ~ fastHealthCheck()
        ~ healthCheck()
    }
  }
  

  namespace cmh.application {
    class cmh.application.R {
        - toAttack : Queue<Thing>
        + R()
        + attack()
        + c()
        + toAttack()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Rocket {
        {static} - amount : int
        + Rocket()
        + Rocket()
        + damage()
        + getInsideRocket()
        + getNearRocket()
        + onBreakEvent()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Squad {
        - destroyPhraseIndex : int
        - destroyPhrases : String[]
        {static} - inTheAirPhraseIndex : int
        - members : ArrayList<Cop>
        - name : String
        + Squad()
        + Squad()
        + attack()
        + callOver()
        + chargePhrase()
        + checkIfSquadInAir()
        + getLeader()
        + getMembers()
        + inTheAirReaction()
        + moveTo()
        + randomCop()
        + setLeader()
        + setMembers()
        - confused()
    }
  }
  

  namespace cmh.application {
    abstract class cmh.application.Thing {
        - onBreakPhrase : String
        + Thing()
        + Thing()
        + break_()
        + damage()
        + equals()
        + getCondition()
        + hashCode()
        + onBreakEvent()
        + setCondition()
        + toString()
        + use()
    }
  }
  

  namespace cmh.application {
    class cmh.application.Weapon {
        {static} - amount : int
        + Weapon()
        + Weapon()
        + dealDamage()
    }
  }
  

  namespace cmh.application {
    class cmh.application.checked {
        + checked()
    }
  }
  

  namespace cmh.application {
    class cmh.application.unchecked {
        + unchecked()
    }
  }
  

  cmh.application.Cop -up-|> cmh.application.Human
  cmh.application.Cop o-- cmh.application.Weapon : meleeWeapon
  cmh.application.Cop o-- cmh.application.Weapon : rangedWeapon
  cmh.application.Device -up-|> cmh.application.Thing
  cmh.application.Entity o-- cmh.application.Location : location
  cmh.application.Human -up-|> cmh.application.Entity
  cmh.application.Human o-- cmh.application.Device : heldDevice
  cmh.application.Human o-- cmh.application.Listener : onNoticeShootingListener
  cmh.application.Human +-down- cmh.application.Human.Wound
  cmh.application.Medic -up-|> cmh.application.Human
  cmh.application.R o-- cmh.application.Cop : c
  cmh.application.Rocket -up-|> cmh.application.Thing
  cmh.application.Rocket o-- cmh.application.Location : insideRocket
  cmh.application.Rocket o-- cmh.application.Location : nearRocket
  cmh.application.Squad o-- cmh.application.Cop : leader
  cmh.application.Thing .up.|> cmh.application.Breakable
  cmh.application.Thing -up-|> cmh.application.Entity
  cmh.application.Thing o-- cmh.application.Condition : condition
  cmh.application.Weapon .up.|> cmh.application.DamageDealer
  cmh.application.Weapon -up-|> cmh.application.Thing


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
